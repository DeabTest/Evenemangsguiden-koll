name: Evenemangsguiden-koll

permissions:
  contents: write
  pages: write
  id-token: write

on:
  schedule:
    # Vintertid (CET = UTC+1): 06–20 lokal -> 05–19 UTC (jan, feb, nov, dec)
    - cron: '0 5-19 * 1,2,11,12 1-5'
    # Sommartid (CEST = UTC+2): 06–20 lokal -> 04–18 UTC (mar–okt)
    - cron: '0 4-18 * 3-10 1-5'
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium

      - name: Run scraper
        run: python fetch_events.py

      # Bygg din befintliga HTML-lista (lämnar detta block orört)
      - name: Build HTML list
        run: |
          python3 - <<'PY'
          import json
          import datetime
          import pathlib
          import subprocess
          import jinja2
          import zoneinfo

          tz = zoneinfo.ZoneInfo("Europe/Stockholm")
          now = datetime.datetime.now(tz).strftime("%Y-%m-%d %H:%M")

          today = datetime.date.today().isoformat()
          yesterday = (datetime.date.today() - datetime.timedelta(days=1)).isoformat()

          data_dir = pathlib.Path("data")
          cur_file = data_dir / f"events_{today}.json"

          events = json.load(cur_file.open(encoding="utf-8"))

          try:
              prev_raw = subprocess.check_output(
                  ["git", "show", f"HEAD:data/events_{today}.json"],
                  text=True
              )
              prev_ids = {e["id"] for e in json.loads(prev_raw)}
          except subprocess.CalledProcessError:
              prev_file = data_dir / f"events_{yesterday}.json"
              if prev_file.exists():
                  prev_ids = {e["id"] for e in json.load(prev_file.open(encoding="utf-8"))}
              else:
                  prev_ids = set()

          for ev in events:
              ev["new"] = ev["id"] not in prev_ids

          tpl = jinja2.Environment(
              loader=jinja2.FileSystemLoader("."),
              autoescape=True
          ).get_template("template.html")
          html = tpl.render(
              STAMP_TIME=now,
              COUNT=len(events),
              events=events
          )

          pub = pathlib.Path("public"); pub.mkdir(exist_ok=True)
          pub.joinpath("index.html").write_text(html, encoding="utf-8")
          PY

      # NYTT: uppdatera first_seen.json (kör skript i repo-rooten)
      - name: Update first_seen registry
        run: python update_first_seen.py

      # NYTT: bygg yesterday.html och publicera first_seen.json (kör skript i repo-rooten)
      - name: Build yesterday overview
        run: python build_yesterday.py

      # Liten debug så vi ser att filer finns innan commit/deploy
      - name: Debug: list public and data
        run: |
          echo "--- public ---"
          ls -la public || true
          echo "--- data ---"
          ls -la data || true

      - name: Commit data
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions[bot]"
          git add data/ public/
          git commit -m "data: update $(date -u +'%Y-%m-%dT%H:%M')" || echo "nothing to commit"

      - name: Push changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          # Om din Pages är satt till main istället för gh-pages, lägg till:
          # publish_branch: main
